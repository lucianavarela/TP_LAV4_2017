/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** Size of LViewData's header. Necessary to adjust for it when setting slots.  */
export var HEADER_OFFSET = 17;
// Below are constants for LViewData indices to help us look up LViewData members
// without having to remember the specific indices.
// Uglify will inline these when minifying so there shouldn't be a cost.
export var TVIEW = 0;
export var PARENT = 1;
export var NEXT = 2;
export var QUERIES = 3;
export var FLAGS = 4;
export var HOST_NODE = 5;
export var BINDING_INDEX = 6;
export var DIRECTIVES = 7;
export var CLEANUP = 8;
export var CONTEXT = 9;
export var INJECTOR = 10;
export var RENDERER = 11;
export var SANITIZER = 12;
export var TAIL = 13;
export var CONTAINER_INDEX = 14;
export var CONTENT_QUERIES = 15;
export var DECLARATION_VIEW = 16;
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
export var unusedValueExportToPlacateAjd = 1;

//# sourceMappingURL=data:application/json;base64,